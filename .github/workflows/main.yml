name: Build, Push and Deploy Docker Image

on:
  push:
    branches:
      - main # ใช้สำหรับสาขาที่ต้องการ trigger workflow เช่น main

jobs:
  # Job สำหรับการ Build และ Push Docker Image ไปยัง Docker Hub
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_REPOSITORY }}:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_REPOSITORY }}:latest

  # Job สำหรับการ Deploy ไปยัง EC2
  deploy:
    runs-on: dailyfixfrontend
    needs: build # จะรันหลังจาก build job เสร็จ
    env:
      REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
      DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
      REACT_APP_API_KEY: ${{ secrets.REACT_APP_API_KEY }}
      REACT_APP_AUTH_DOMAIN: ${{ secrets.REACT_APP_AUTH_DOMAIN }}
      REACT_APP_PROJECT_ID: ${{ secrets.DOCKER_REPOSITORY }}
      REACT_APP_STORAGE_BUCKET: ${{ secrets.REACT_APP_STORAGE_BUCKET }}
      REACT_APP_MESSAGE_SENDING_ID: ${{ secrets.REACT_APP_MESSAGE_SENDING_ID }}
      REACT_APP_APP_ID: ${{ secrets.REACT_APP_MESSAGE_SENDING_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # - name: Create .env file for Docker Compose
      #   run: |
      #     echo "REACT_APP_BASE_URL=${{ secrets.REACT_APP_BASE_URL }}" > .env

      - name: Build and deploy Docker containers
        run: |
          # Stop and remove existing containers on EC2
          docker-compose down

          # Pull latest image from Docker Hub
          docker-compose pull

          # Start Docker containers
          docker-compose up -d

      - name: Remove dangling images
        run: |
          docker rmi $(docker images --filter "dangling=true" --quiet --no-trunc) || true # Ignore if none exist
